
- name: "Loki role disabled or missing config, skipping"
  ansible.builtin.meta: end_host
  when: not loki_enabled | default(false) or loki_config is not defined

- name: "Install dependencies"
  ansible.builtin.apt:
    name:
      - curl
      - tar
    update_cache: true
    state: present

- name: "Create Loki directories"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - /opt/loki
    - /etc/loki

- name: "Download Loki binary"
  ansible.builtin.get_url:
    url: "{{ loki_url }}"
    dest: /tmp/loki.zip
    mode: '0644'

- name: "Extract Loki binary"
  ansible.builtin.unarchive:
    src: /tmp/loki.zip
    dest: /opt/loki
    remote_src: true

- name: "Rename Loki binary"
  ansible.builtin.command: mv /opt/loki/loki-linux-amd64 /opt/loki/loki
  args:
    creates: /opt/loki/loki

- name: "Deploy loki config"
  ansible.builtin.copy:
    content: "{{ loki_config }}"
    dest: /etc/loki/config.yml
    owner: root
    group: root
    mode: '0644'
  notify: Restart loki

- name: "Install systemd service"
  ansible.builtin.copy:
    src: loki.service
    dest: /etc/systemd/system/loki.service
    mode: '0644'
  notify: Reload systemd

- name: "Ensure loki is enabled and started"
  ansible.builtin.systemd:
    name: loki
    enabled: true
    state: started
  register: loki_systemd

- name: "Verify loki is running"
  ansible.builtin.command: systemctl is-active loki
  register: loki_status
  failed_when: loki_status.stdout != "active"
  changed_when: false


